#### BEGIN CONFIGURATION ####

# Where is the SpatialRestraint located?
executable_path = '/mnt/home/fergu358/research/rogue_cell/SpatialRestraint/SpatialRestraint'
# Where should we save *actual* output data (from the SpatialRestraint app)
scratch_dir = '/mnt/gs18/scratch/users/fergu358/rogue_cell/SpatialRestraint/'
# Where should we save the slurm scripts generated by this script?
job_dir = '/mnt/home/fergu358/research/rogue_cell/SpatialRestraint/jobs/'

# SpatialRestraint config options
    # Variables not shown as lists will be treated as constant across all runs
    # Variables that are lists are used such that *every* combination is generated
mc_size_list = [1024,512,256,128,64,32,16,8]
unrestrained_cost_list = [0,100]
gen_num = 10000
mut_rate = 0.2
pop_size = 10000
samples_num = 1000
# Any extra flags to send to SpatialRestraint
extra_flags = '-o -v'

#### END CONFIGURATION ####

num_jobs = 0
# We also save out a file, ./run_all_jobs.sh that will send all generated job files to slurm
    # Note: The file will need to be made executable: chmod a+x run_all_jobs.sh
with open('run_all_jobs.sh', 'w') as fp_run:
    fp_run.write('#!/bin/bash \n')
    # Iterate through each combination of configuration variables
    # TODO: Make this less awful. Something like the combinations thing Charles added to Empirical
    for mc_size in mc_size_list:
        for unrestrained_cost in unrestrained_cost_list:
            num_jobs = num_jobs + 1
            # Encode configuration data into filename
            filename_prefix = 'spatial_restraint' + \
                '__MCSIZE_' + str(mc_size) + \
                '__COST_' + str(unrestrained_cost)
            # Append to run_all_scripts.sh
            fp_run.write('mkdir ' + scratch_dir + filename_prefix + '\n') 
            fp_run.write('cd ' + scratch_dir + filename_prefix + '\n') 
            fp_run.write('sbatch ' + job_dir + filename_prefix + '.sb' + '\n')
            # Write job file using configuration options
            with open(job_dir + filename_prefix + '.sb', 'w') as fp_job:
                fp_job.write('#!/bin/bash --login' + '\n')
                fp_job.write('' + '\n')
                # Change the time per job here!
                fp_job.write('#SBATCH --time=167:00:00' + '\n')
                fp_job.write('#SBATCH --nodes=1' + '\n')
                fp_job.write('#SBATCH --ntasks=1' + '\n')
                fp_job.write('#SBATCH --cpus-per-task=1' + '\n')
                fp_job.write('#SBATCH --mem-per-cpu=1G' + '\n')
                fp_job.write('#SBATCH --job-name Spatial_Restraint' + '\n')
                fp_job.write('#SBATCH --array=1-1' + '\n')
                fp_job.write('' + '\n')
                fp_job.write('module purge' + '\n')
                fp_job.write('module load GCC/9.1.0-2.32' + '\n')
                fp_job.write('' + '\n')
                fp_job.write('time ' + executable_path)
                fp_job.write(' -c ' + str(mc_size))
                fp_job.write(' -g ' + str(gen_num))
                fp_job.write(' -m ' + str(mut_rate))
                fp_job.write(' -s ' + str(samples_num))
                fp_job.write(' -u ' + str(unrestrained_cost))
                fp_job.write(' ' + extra_flags)
                fp_job.write('\n')
                fp_job.write('echo "' + executable_path)
                fp_job.write(' -c ' + str(mc_size))
                fp_job.write(' -g ' + str(gen_num))
                fp_job.write(' -m ' + str(mut_rate))
                fp_job.write(' -s ' + str(samples_num))
                fp_job.write(' -u ' + str(unrestrained_cost))
                fp_job.write(' ' + extra_flags)
                fp_job.write('"\n')
                fp_job.write('scontrol show job $SLURM_JOB_ID' + '\n')

print('Generated ' +  str(num_jobs) + '!')
